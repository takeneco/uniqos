# @brief  x86_64固有カーネルコード
#
# (C) 2011-2014 KATO Takeshi
#


kern_linkflags = [
    '-nostdlib',
    '-static',
]

kern_sources = [
    'apic.cc',
    'global_vars.cc',
    'cpu_idte.cc',
    'hpet_timer.cc',
    'interrupt_native.S',
    'irq_ctl.cc',
    'kerninit.cc',
    'native_cpu_node.cc',
    'native_process.cc',
    'native_process_ctl.cc',
    'on_syscall.S',
    'page_ctl.cc',
    'page_ctl_init.cc',
    'page_table.cc',
    'string.cc',
    'bootinfo.cc',
    'spinlock_ops.cc',
    'start.S',
    'syscall_entry.cc',
    'thread_ctl.cc',
    'cpu_ctl.cc',

    # for g++
    'gnuc.c',

    # for test
    'test.cc',
]


def configure(x):
	x.find_program('lzma', var='LZMA')
	x.find_program('objcopy', var='OBJCOPY')


def build(x):
	x.recurse('first')

	kern_target = x.path.find_or_declare('kernel.bin')

	ap_boot_bin = x.path.find_or_declare('ap_boot.bin')

	x(  features      = 'asm c cprogram linker_opts',
	    target        = ap_boot_bin,
	    source        = 'ap_boot.S',
	    linkflags     = ['-nostdlib'],
	    linker_script = 'ap_boot.lds')

	ap_boot_obj = x.path.find_or_declare('ap_boot_obj.o')

	x(  rule = '${OBJCOPY} -I binary -O elf64-x86-64 -B i386 '
	           '${SRC} ${TGT}',
	    target = ap_boot_obj,
	    source = ap_boot_bin)

	kern_sources.append(ap_boot_obj)

	kernel_link_use = ['kernel_libs', 'kernel_objs', 'KERNEL']
	kernel_link_use.extend(x.env['KERNEL_LINK_USE'])
	x.program(
	    features      = 'asm c cxx linker_opts',
	    target        = kern_target,
	    source        = kern_sources,
	    use           = kernel_link_use,
	    linkflags     = kern_linkflags,
	    linker_script = 'kernel.lds',
	    mapfile       = 'kernel.map')

	#x(  target   = 'kernel.bin.lzma',
	#    source   = 'kernel.bin',
	#    rule     = '${LZMA} -c ${SRC} > ${TGT}')

