# architecture independent kernel codes.
#
# (C) 2011-2012 KATO Takeshi
#


kern_sources = [
    'cpu_node.cc',
    'ctype.cc',
    'file.cc',
    'output_buffer.cc',
    'intr_ctl.cc',
    'kern_log.cc',
    'log_target.cc',
    'mem_file.cc',
    'mempool.cc',
    'mempool_ctl.cc',
    'page.cc',
    'page_pool.cc',
    #'slab_allocate.cc',
    'spinlock.cc',
    'string.cc',
    'thread.cc',
    'thread_queue.cc',
    'timer_ctl.cc',
]

kern_defines = []


mb_sources = [
    'ctype.cc',      # necessary to link with string.cc in g++.
    'file.cc',
    'log_target.cc',
    'output_buffer.cc',
    'string.cc',
]


def build(x):
	kern_defines.extend(x.env.common_defines)

	x.objects(
	    target   = 'kernel_objs',
	    source   = kern_sources,
	    defines  = kern_defines,
	    use      = 'KERNEL',
	)

	if x.env.boot_multiboot:
		x.objects(
		    target   = 'mb_libs',
		    source   = mb_sources,
		    use      = 'MB',
		)


