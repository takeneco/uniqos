# build multiboot image
#
# (C) 2011 KATO Takeshi
#

source = [
	'entry.S',
	'log_access.cc',
	'load.cc',
	'mem_alloc.cc',
	'preload.cc',
]

def configure(x):
	x.find_program('objcopy', var='OBJCOPY')
	x.env.append_value('CXXFLAGS_MB', '-m32')
	x.env.append_value('DEFINES_MB', 'ARCH_IA32')
	pass

def build(x):
	target = x.path.find_or_declare('us')

	linker_script = x.path.find_node('multiboot.ld')

	ls_opt = '-T' + linker_script.abspath()

	x.add_manual_dependency(target, linker_script)

	env = x.env.derive()
	env.append_value('ASFLAGS', '-m32')

	core = x.path.find_or_declare('core.o')
	x(
	    rule = '${OBJCOPY} -I binary -O elf32-i386 -B i386 '
	           '${SRC} ${TGT}',
	    target = core,
	    source = '../../kernel/kernel.bin',
	)
	x.add_manual_dependency(target, core)

	x.program(
	    target = target,
	    source = source,
	    cxxflags = ['-fno-exceptions', '-fno-rtti', '-mno-sse'],
	    linkflags = [
		    core.abspath(),
		    '-m32',
		    '-nostdlib',
		    '-static', ls_opt],
	    env = env,
	    use = ['MB', 'mb_archlibs', 'mb_libs'],
	)

