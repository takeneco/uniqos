
setup_asflags = [
#    '-mcmodel=large',
]

setup_includes = [
    '.',
]

setup_linkflags = [
    '-nostdlib',
    '-static',
    "-Wl,-M"
]

setup_source = [
    'lzmadecwrap.cc',
    'memmgr.cc',
    'memops.cc',
    'prekernel.cc',
    'termchain.cc',
    'videoterm.cc',
]

def build(bld):
	# assemble -->
	setup_rule_a = '${CC} -c ${SRC} -o ${TGT} ' + ' '.join(setup_asflags)

	bld(target = 'a20.o',
	    source = 'a20.S',
	    rule   = setup_rule_a)
	bld(target = 'setup.o',
	    source = 'setup.S',
	    rule   = setup_rule_a)
	# <-- assemble

	setup_includes.append(bld.top_dir + '/external/lzma/C')

	setup_linkflags.append('-T'+bld.path.find_node('setup.ld').abspath())
	bld.add_manual_dependency(
	    bld.path.find_or_declare('setup.bin'),
	    bld.path.find_node('setup.ld'))

	setup_linkflags2 = [bld.env.LINK_PASS + f for f in setup_linkflags]

	setup_linkflags2.extend([
	    bld.path.find_or_declare('a20.o').abspath(),
	    bld.path.find_or_declare('setup.o').abspath(),
	])

	setup_source.append(bld.srcnode.find_node('external/lzma/C/LzmaDec.c'))
	bld.program(
	    target    = 'setup.bin',
	    source    = setup_source,
	    use       = 'SETUP',
	    includes  = setup_includes,
	    cxxflags  = ['-fno-exceptions', '-fno-rtti', '-Os'],
	    linkflags = setup_linkflags2,
	)

	bld.add_manual_dependency(
	    bld.path.find_or_declare('setup.bin'),
	    bld.path.find_or_declare('setup.o')
	)
	bld.add_manual_dependency(
	    bld.path.find_or_declare('setup.bin'),
	    bld.path.find_or_declare('a20.o')
	)

