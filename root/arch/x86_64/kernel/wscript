
kern_defines = []

kern_includes = ['../include']

kern_asflags = []

kern_linkflags = [
    '-nostdlib', '-static',
    '-mcmodel=large'
]

kern_source = [
    'apic.cc',
    'global_variables.cc',
    'intr.cc',
    'kerninit.cc',
    'kernel_memory.cc',
    'physical_memory.cc',
    'serialout.cc',
    'setupdata.cc',
    'videoout.cc',
    'cpuinit.cc',

    # for g++
    'gnuc.c',
]

def configure(conf):
	conf.find_program('lzma', var='LZMA')

def build(bld):
	bld.recurse('setup')

	kern_defines.extend(bld.env.common_defines)
	kern_asflags.extend(bld.env.common_asflags)

	# assemble -->
	kern_rule_a = '${CC} -c ${SRC} -o ${TGT} ' + ' '.join(kern_asflags)

	bld(target='entry.o',
	    source='entry.S',
	    rule=kern_rule_a)
	bld(target='exception_handler.o',
	    source='exception_handler.S',
	    rule=kern_rule_a)
	bld(target='serialh.o',
	    source='serialh.S',
	    rule=kern_rule_a)
	# <--

	kern_linkflags.append(
	    '-T' + bld.path.find_node('kernel.ld').abspath())
	bld.add_manual_dependency(
	    bld.path.find_or_declare('kernel.bin'),
	    bld.path.find_node('kernel.ld'))

	kern_linkflags2 = [bld.env.LINK_PASS + f for f in kern_linkflags]

	kern_linkflags2.extend([
	    bld.path.find_or_declare('entry.o').abspath(),
	    bld.path.find_or_declare('exception_handler.o').abspath(),
	    bld.path.find_or_declare('serialh.o').abspath(),
	])

	bld.program(features='cxx cxxprogram',
	    target   = 'kernel.bin',
	    source   = kern_source,
	    use      = ['kernel_objs', 'KERNEL'],
	    defines  = kern_defines,
	    linkflags= kern_linkflags2)

	bld(
	    target   = 'kernel.bin.lzma',
	    source   = 'kernel.bin',
	    rule     = '${LZMA} -c ${SRC} > ${TGT}')

