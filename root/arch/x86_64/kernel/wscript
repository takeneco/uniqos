# @file   wscript
# @brief  x86_64固有カーネルコード
#
# (C) 2011 KATO Takeshi
#


kern_linkflags = [
    '-nostartfiles',
    '-static',
]

kern_source = [
    'apic.cc',
    'entry.S',
    'global_variables.cc',
    'cpu_idte.cc',
    'interrupt_native.S',
    'ioapic.cc',
    'irq_control.cc',
    'kerninit.cc',
    'kernel_memory.cc',
    'page_ctl.cc',
    'page_ctl_init.cc',
    'serial.cc',
    'serialh.S',
    'setupdata.cc',
    'cpu_ctl.cc',

    # for g++
    'gnuc.c',

    # for test
    'test.cc',
]


def configure(x):
	x.find_program('lzma', var='LZMA')

def build(x):
	kern_target = x.path.find_or_declare('kernel.bin')

	linker_script = x.path.find_node('kernel.lds')
	kern_linkflags.append('-Wl,-T' + linker_script.abspath())
	x.add_manual_dependency(kern_target, linker_script)

	mapfile = x.path.find_or_declare('kernel.map')
	kern_linkflags.append('-Wl,-Map,' + mapfile.abspath())

	x(  features  = 'asm c cxx cxxprogram',
	    target    = kern_target,
	    source    = kern_source,
	    use       = ['kernel_libs', 'kernel_objs', 'KERNEL'],
	    linkflags = kern_linkflags)

	x(  target   = 'kernel.bin.lzma',
	    source   = 'kernel.bin',
	    rule     = '${LZMA} -c ${SRC} > ${TGT}')

